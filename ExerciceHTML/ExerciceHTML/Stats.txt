!= : 3
!trouve) : 1
" : 8
""; : 1
"); : 5
"; : 1
"</span>"; : 2
"<span : 2
"alignas", : 1
"alignof", : 1
"and", : 1
"and_eq", : 1
"asm", : 1
"auto", : 1
"bitand", : 1
"bitor", : 1
"bool", : 1
"break", : 1
"case", : 1
"catch", : 1
"char", : 1
"char16_t", : 1
"char32_t", : 1
"class", : 1
"compl", : 1
"concept", : 1
"const", : 1
"const_cast", : 1
"constexpr", : 1
"continue", : 1
"decltype", : 1
"default", : 1
"delete", : 1
"do", : 1
"double", : 1
"dynamic_cast", : 1
"else", : 1
"enum", : 1
"explicit", : 1
"export", : 1
"extern", : 1
"false", : 1
"float", : 1
"for", : 1
"friend", : 1
"goto", : 1
"if", : 1
"inline", : 1
"int", : 1
"long", : 1
"mutable", : 1
"namespace", : 1
"new", : 1
"noexcept", : 1
"not", : 1
"not_eq", : 1
"nullptr", : 1
"operator", : 1
"or", : 1
"or_eq", : 1
"private", : 1
"protected", : 1
"public", : 1
"register", : 1
"reinterpret_cast", : 1
"requires", : 1
"return", : 1
"short", : 1
"signed", : 1
"sizeof", : 1
"static", : 1
"static_assert", : 1
"static_cast", : 1
"struct", : 1
"switch", : 1
"template", : 1
"this", : 1
"thread_local", : 1
"throw", : 1
"true", : 1
"try", : 1
"typedef", : 1
"typeid", : 1
"typename", : 1
"union", : 1
"unsigned", : 1
"using", : 1
"virtual", : 1
"void", : 1
"volatile", : 1
"wchar_t", : 1
"while", : 1
"xor", : 1
"xor_eq"}; : 1
#include : 8
&& : 1
&amp : 1
&content) : 1
&gt : 1
&lt : 1
&nbsp&nbsp&nbsp&nbsp : 1
'&') : 1
'<') : 1
'>') : 1
'\n') : 1
'\t') : 1
(auto : 1
(content[i] : 5
(int : 4
(keywords.at(j) : 1
(outfile) : 1
(stats) : 1
(string : 1
(word : 1
+ : 6
++i) : 2
+= : 9
// : 8
//METTRE : 1
//regex : 1
//string : 1
//void : 1
//{ : 1
//} : 1
0; : 4
1, : 5
21; : 1
4; : 3
6; : 1
: : 1
< : 3
</br> : 1
<< : 5
<algorithm> : 1
<fstream> : 1
<iostream> : 1
<map> : 1
<regex> : 1
<sstream> : 1
<string> : 1
<vector> : 1
= : 13
== : 6
>> : 1
AddSpanToKeywords(string& : 1
AddSpanToKeywords(vector<string>& : 1
AddSpanToKeywords(words); : 1
FIND : 1
ICI : 1
RemplacerTout(content); : 1
RemplacerTout(string : 1
UN : 1
argc, : 1
argv[]) : 1
auto : 1
back_inserter(words)); : 1
bool : 1
char* : 1
content : 6
content, : 1
content.find(keyword); : 1
content.replace(i, : 5
content.size(); : 1
content; : 3
copy(istream_iterator<string>(iss), : 1
else : 4
endl; : 1
expression(pattern); : 1
false; : 1
for : 6
i : 11
i++) : 1
if : 9
ifstream : 1
infile : 1
infile("Source.cpp"); : 1
int : 1
int> : 1
iss(content); : 1
istream_iterator<string>(), : 1
istringstream : 1
j : 2
j++) : 1
keyword : 1
keyword) : 1
keyword.length(), : 1
keywords : 1
keywords.size(); : 1
main(int : 1
map<string, : 1
mots.begin(); : 1
mots.end(); : 1
mots; : 1
mots[s]++; : 1
namespace : 1
ofstream : 2
oldContent : 1
oldContent.length()); : 1
oldContent.substr(0, : 1
oldContent.substr(word : 1
outfile : 1
outfile("Source.cpp.html"); : 1
pattern("[a-zA-Z_]([a-zA-Z0-9_])*"); : 1
s : 2
s++) : 1
s->first : 1
s->second : 1
s; : 2
s;) : 1
stats : 1
stats("Stats.txt"); : 1
std::string::npos) : 1
std; : 1
string : 3
style='color:blue'>" : 2
trouve : 2
true; : 1
using : 1
vector<string> : 2
vector<string>{ : 1
void : 2
word : 1
word); : 1
words) : 1
words.size(); : 2
words; : 1
words[i] : 4
{ : 18
} : 18
